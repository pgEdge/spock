SELECT * FROM spock_regress_variables()
\gset
\c :provider_dsn
SET client_min_messages = 'warning';
DROP ROLE IF EXISTS nonreplica;
CREATE USER nonreplica;
DO $$
BEGIN
	IF (SELECT setting::integer/100 FROM pg_settings WHERE name = 'server_version_num') = 904 THEN
		CREATE EXTENSION IF NOT EXISTS spock_origin;
	END IF;
END;$$;
CREATE EXTENSION IF NOT EXISTS spock;
GRANT ALL ON SCHEMA spock TO nonreplica;
GRANT ALL ON ALL TABLES IN SCHEMA spock TO nonreplica;
\c :subscriber_dsn
SET client_min_messages = 'warning';
\set VERBOSITY terse
DO $$
BEGIN
	IF (SELECT setting::integer/100 FROM pg_settings WHERE name = 'server_version_num') = 904 THEN
		CREATE EXTENSION IF NOT EXISTS spock_origin;
	END IF;
END;$$;
DO $$
BEGIN
        IF version() ~ 'Postgres-XL' THEN
                CREATE EXTENSION IF NOT EXISTS spock;
        ELSE
                CREATE EXTENSION IF NOT EXISTS spock VERSION '6.0.0-devel';
        END IF;
END;
$$;
ALTER EXTENSION spock UPDATE;
-- fail (local node not existing)
SELECT * FROM spock.sub_create(
    subscription_name := 'test_subscription',
    provider_dsn := (SELECT provider_dsn FROM spock_regress_variables()) || ' user=nonreplica',
	forward_origins := '{}');
ERROR:  local spock node not found
-- succeed
SELECT * FROM spock.node_create(node_name := 'test_subscriber', dsn := (SELECT subscriber_dsn FROM spock_regress_variables()) || ' user=nonreplica');
 node_create 
-------------
       52665
(1 row)

-- fail (can't connect to remote)
DO $$
BEGIN
    SELECT * FROM spock.sub_create(
        subscription_name := 'test_subscription',
        provider_dsn := (SELECT provider_dsn FROM spock_regress_variables()) || ' user=nonexisting',
        forward_origins := '{}');
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION '%:%', split_part(SQLERRM, ':', 1), (regexp_matches(SQLERRM, '^.*( FATAL:.*role.*)$'))[1];
END;
$$;
ERROR:  could not connect to the postgresql server: FATAL:  role "nonexisting" does not exist

-- fail (remote node not existing)
SELECT * FROM spock.sub_create(
    subscription_name := 'test_subscription',
    provider_dsn := (SELECT provider_dsn FROM spock_regress_variables()) || ' user=nonreplica',
	forward_origins := '{}');
ERROR:  could not fetch remote node info: ERROR:  local spock node not found


\c :provider_dsn
-- succeed
SELECT * FROM spock.node_create(node_name := 'test_provider', dsn := (SELECT provider_dsn FROM spock_regress_variables()) || ' user=nonreplica');
 node_create 
-------------
       45328
(1 row)

\c :subscriber_dsn
\set VERBOSITY terse
-- fail (can't connect with replication connection to remote)
DO $$
BEGIN
    SELECT * FROM spock.sub_create(
        subscription_name := 'test_subscription',
        provider_dsn := (SELECT provider_dsn FROM spock_regress_variables()) || ' user=nonreplica',
            forward_origins := '{}');
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION '%', split_part(SQLERRM, ':', 1);
END;
$$;
ERROR:  could not connect to the postgresql server in replication mode
-- cleanup
SELECT * FROM spock.node_drop('test_subscriber');
 node_drop 
-----------
 t
(1 row)

DROP EXTENSION spock;
\c :provider_dsn
SELECT * FROM spock.node_drop('test_provider');
 node_drop 
-----------
 t
(1 row)

SET client_min_messages = 'warning';
DROP OWNED BY nonreplica;
DROP ROLE IF EXISTS nonreplica;
DROP EXTENSION spock;
