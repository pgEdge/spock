SELECT * FROM spock_regress_variables()
\gset
\c :provider_dsn
SELECT E'\'' || current_database() || E'\'' AS pubdb;
    pubdb     
--------------
 'regression'
(1 row)

\gset
\c :orig_provider_dsn
SET client_min_messages = 'warning';
GRANT ALL ON SCHEMA public TO nonsuper;
SET client_min_messages = 'warning';
DO $$
BEGIN
        CREATE EXTENSION IF NOT EXISTS spock;
END;
$$;
ALTER EXTENSION spock UPDATE;
SELECT * FROM spock.node_create(node_name := 'test_orig_provider', dsn := (SELECT orig_provider_dsn FROM spock_regress_variables()) || ' user=super');
 node_create 
-------------
       63171
(1 row)

\c :provider_dsn
SET client_min_messages = 'warning';
-- test_provider spock node already exists here.
BEGIN;
SELECT * FROM spock.sub_create(
    subscription_name := 'test_orig_subscription',
    provider_dsn := (SELECT orig_provider_dsn FROM spock_regress_variables()) || ' user=super',
	synchronize_structure := false,
        synchronize_data := true,
	forward_origins := '{}');
 sub_create 
------------
 3575176667
(1 row)

COMMIT;
BEGIN;
SET LOCAL statement_timeout = '10s';
SELECT spock.sub_wait_for_sync('test_orig_subscription');
 sub_wait_for_sync 
-------------------
 
(1 row)

COMMIT;
SELECT subscription_name, status, provider_node, replication_sets, forward_origins FROM spock.sub_show_status();
   subscription_name    |   status    |   provider_node    |           replication_sets            | forward_origins 
------------------------+-------------+--------------------+---------------------------------------+-----------------
 test_orig_subscription | replicating | test_orig_provider | {default,default_insert_only,ddl_sql} | 
(1 row)

SELECT sync_kind, sync_subid, sync_nspname, sync_relname, sync_status IN ('y', 'r') FROM spock.local_sync_status ORDER BY 2,3,4;
 sync_kind | sync_subid | sync_nspname | sync_relname | ?column? 
-----------+------------+--------------+--------------+----------
 d         | 3575176667 |              |              | t
(1 row)

-- Make sure we see the slot and active connection
\c :orig_provider_dsn
SELECT plugin, slot_type, active FROM pg_replication_slots;
    plugin    | slot_type | active 
--------------+-----------+--------
 spock_output | logical   | t
 spock_output | logical   | t
(2 rows)

SELECT count(*) FROM pg_stat_replication;
 count 
-------
     2
(1 row)

-- Table that replicates from top level provider to mid-level spock node.
\c :orig_provider_dsn
SELECT spock.replicate_ddl($$
	CREATE TABLE public.top_level_tbl (
		id serial primary key,
		other integer,
		data text,
		something interval
	);
$$);
 replicate_ddl 
---------------
 t
(1 row)

SELECT * FROM spock.repset_add_table('default', 'top_level_tbl');
 repset_add_table 
------------------
 t
(1 row)

INSERT INTO top_level_tbl(other, data, something)
VALUES (5, 'foo', '1 minute'::interval),
       (4, 'bar', '12 weeks'::interval),
       (3, 'baz', '2 years 1 hour'::interval),
       (2, 'qux', '8 months 2 days'::interval),
       (1, NULL, NULL);
SELECT spock.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :provider_dsn
SELECT id, other, data, something FROM top_level_tbl ORDER BY id;
 id | other | data |    something     
----+-------+------+------------------
  1 |     5 | foo  | @ 1 min
  2 |     4 | bar  | @ 84 days
  3 |     3 | baz  | @ 2 years 1 hour
  4 |     2 | qux  | @ 8 mons 2 days
  5 |     1 |      | 
(5 rows)

-- Table that replicates from top level provider to mid-level spock node.
SELECT spock.replicate_ddl($$
	CREATE TABLE public.mid_level_tbl (
		id serial primary key,
		other integer,
		data text,
		something interval
	);
$$);
 replicate_ddl 
---------------
 t
(1 row)

SELECT * FROM spock.repset_add_table('default', 'mid_level_tbl');
 repset_add_table 
------------------
 t
(1 row)

INSERT INTO mid_level_tbl(other, data, something)
VALUES (5, 'foo', '1 minute'::interval),
       (4, 'bar', '12 weeks'::interval),
       (3, 'baz', '2 years 1 hour'::interval),
       (2, 'qux', '8 months 2 days'::interval),
       (1, NULL, NULL);
SELECT spock.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :subscriber_dsn
SELECT id, other, data, something FROM mid_level_tbl ORDER BY id;
 id | other | data |    something     
----+-------+------+------------------
  1 |     5 | foo  | @ 1 min
  2 |     4 | bar  | @ 84 days
  3 |     3 | baz  | @ 2 years 1 hour
  4 |     2 | qux  | @ 8 mons 2 days
  5 |     1 |      | 
(5 rows)

-- drop the tables
\c :orig_provider_dsn
\set VERBOSITY terse
SELECT spock.replicate_ddl($$
	DROP TABLE public.top_level_tbl CASCADE;
$$);
NOTICE:  drop cascades to table top_level_tbl membership in replication set default
 replicate_ddl 
---------------
 t
(1 row)

\c :provider_dsn
\set VERBOSITY terse
SELECT spock.replicate_ddl($$
	DROP TABLE public.mid_level_tbl CASCADE;
$$);
NOTICE:  drop cascades to table mid_level_tbl membership in replication set default
 replicate_ddl 
---------------
 t
(1 row)

\c :provider_dsn
SELECT * FROM spock.sub_drop('test_orig_subscription');
 sub_drop 
----------
        1
(1 row)

\c :orig_provider_dsn
SELECT * FROM spock.node_drop(node_name := 'test_orig_provider');
 node_drop 
-----------
 t
(1 row)

SELECT plugin, slot_type, active FROM pg_replication_slots;
    plugin    | slot_type | active 
--------------+-----------+--------
 spock_output | logical   | t
(1 row)

SELECT count(*) FROM pg_stat_replication;
 count 
-------
     1
(1 row)

