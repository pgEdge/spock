SELECT * FROM spock_regress_variables()
\gset
\c :subscriber_dsn
GRANT ALL ON SCHEMA public TO nonsuper;
SELECT E'\'' || current_database() || E'\'' AS subdb;
   subdb    
------------
 'postgres'
(1 row)

\gset
\c :provider1_dsn
SET client_min_messages = 'warning';
GRANT ALL ON SCHEMA public TO nonsuper;
SET client_min_messages = 'warning';
DO $$
BEGIN
        IF (SELECT setting::integer/100 FROM pg_settings WHERE name = 'server_version_num') = 904 THEN
                CREATE EXTENSION IF NOT EXISTS spock_origin;
        END IF;
END;$$;
CREATE EXTENSION IF NOT EXISTS spock;
SELECT * FROM spock.node_create(node_name := 'test_provider1', dsn := (SELECT provider1_dsn FROM spock_regress_variables()) || ' user=super');
 node_create 
-------------
       40365
(1 row)

\c :provider_dsn
-- add these entries to provider
SELECT spock.replicate_ddl($$
      CREATE TABLE public.multi_ups_tbl(id integer primary key, key text unique not null, data text);
$$);
 replicate_ddl 
---------------
 t
(1 row)

INSERT INTO multi_ups_tbl VALUES(1, 'key1', 'data1');
INSERT INTO multi_ups_tbl VALUES(2, 'key2', 'data2');
INSERT INTO multi_ups_tbl VALUES(3, 'key3', 'data3');
SELECT * FROM spock.repset_add_table('default', 'multi_ups_tbl', true);
 repset_add_table 
------------------
 t
(1 row)

SELECT spock.wait_slot_confirm_lsn(NULL, NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\c :provider1_dsn
-- add these entries to provider1
CREATE TABLE multi_ups_tbl(id integer primary key, key text unique not null, data text);
INSERT INTO multi_ups_tbl VALUES(4, 'key4', 'data4');
INSERT INTO multi_ups_tbl VALUES(5, 'key5', 'data5');
INSERT INTO multi_ups_tbl VALUES(6, 'key6', 'data6');
SELECT * FROM spock.repset_add_table('default', 'multi_ups_tbl');
 repset_add_table 
------------------
 t
(1 row)

\c :subscriber_dsn
-- We'll use the already existing spock node
-- notice synchronize_structure as false when table definition already exists
SELECT * FROM spock.sub_create(
    subscription_name := 'test_subscription1',
    provider_dsn := (SELECT provider1_dsn FROM spock_regress_variables()) || ' user=super',
	synchronize_structure := false,
        synchronize_data := true,
	forward_origins := '{}');
 sub_create 
------------
 3102546391
(1 row)

BEGIN;
SET LOCAL statement_timeout = '10s';
SELECT spock.sub_wait_for_sync('test_subscription1');
 sub_wait_for_sync 
-------------------
 
(1 row)

COMMIT;
SELECT subscription_name, status, provider_node, replication_sets, forward_origins FROM spock.sub_show_status();
 subscription_name  |   status    | provider_node  |           replication_sets            | forward_origins 
--------------------+-------------+----------------+---------------------------------------+-----------------
 test_subscription  | replicating | test_provider  | {default,default_insert_only,ddl_sql} | 
 test_subscription1 | replicating | test_provider1 | {default,default_insert_only,ddl_sql} | 
(2 rows)

SELECT sync_kind, sync_subid, sync_nspname, sync_relname, sync_status IN ('y', 'r') FROM spock.local_sync_status ORDER BY 2,3,4;
 sync_kind | sync_subid | sync_nspname | sync_relname  | ?column? 
-----------+------------+--------------+---------------+----------
 f         | 3102546391 | public       | multi_ups_tbl | t
 d         | 3102546391 |              |               | t
 d         | 3848008564 | public       | multi_ups_tbl | t
 f         | 3848008564 |              |               | t
(4 rows)

SELECT * from multi_ups_tbl ORDER BY id;
 id | key  | data  
----+------+-------
  1 | key1 | data1
  2 | key2 | data2
  3 | key3 | data3
  4 | key4 | data4
  5 | key5 | data5
  6 | key6 | data6
(6 rows)

-- Make sure we see the slot and active connection
\c :provider1_dsn
SELECT plugin, slot_type, active FROM pg_replication_slots;
    plugin    | slot_type | active 
--------------+-----------+--------
 spock_output | logical   | t
 spock_output | logical   | t
(2 rows)

SELECT count(*) FROM pg_stat_replication;
 count 
-------
     2
(1 row)

-- cleanup
\c :provider_dsn
\set VERBOSITY terse
SELECT spock.replicate_ddl($$
        DROP TABLE public.multi_ups_tbl CASCADE;
$$);
NOTICE:  drop cascades to table multi_ups_tbl membership in replication set default
 replicate_ddl 
---------------
 t
(1 row)

\c :provider1_dsn
SELECT * FROM spock.node_drop(node_name := 'test_provider1');
ERROR:  cannot drop node "test_provider1" because one or more replication slots for the node are still active
\set VERBOSITY terse
DROP TABLE public.multi_ups_tbl CASCADE;
NOTICE:  drop cascades to table multi_ups_tbl membership in replication set default
\c :subscriber_dsn
SELECT * FROM spock.sub_drop('test_subscription1');
 sub_drop 
----------
        1
(1 row)

\c :provider1_dsn
SELECT * FROM spock.node_drop(node_name := 'test_provider1');
 node_drop 
-----------
 t
(1 row)

SELECT plugin, slot_type, active FROM pg_replication_slots;
    plugin    | slot_type | active 
--------------+-----------+--------
 spock_output | logical   | t
(1 row)

SELECT count(*) FROM pg_stat_replication;
 count 
-------
     1
(1 row)

