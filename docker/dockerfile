# Use Ubuntu as the base image
FROM ubuntu:22.04

# Set non-interactive mode for package installations
ENV DEBIAN_FRONTEND=noninteractive

# Set up PostgreSQL environment variables dynamically
ARG PG_VERSION
ENV PGPORT="54${PG_VERSION}"
ENV PGDATA="/var/lib/postgresql/data-${PG_VERSION}"
ENV POSTGRES_USER=postgres
ENV POSTGRES_DB=postgres
ENV PG_VER="${PG_VERSION}"

# Install required dependencies
RUN apt-get update && apt-get install -y \
    sudo \
    openssh-server \
    git \
    patch \
    build-essential \
    libreadline-dev \
    zlib1g-dev \
    bison \
    flex \
    curl \
    ca-certificates \
    gcc \
    wget \
    libicu-dev \
    && rm -rf /var/lib/apt/lists/*

ARG GITHUB_TOKEN
ENV GITHUB_TOKEN=${GITHUB_TOKEN}

# Clone PostgreSQL source first before applying patches
RUN git clone https://github.com/postgres/postgres.git /home/postgres/postgres-source && \
    cd /home/postgres/postgres-source && \
    git fetch --tags && \
    LATEST_TAG=$(git tag -l "REL_${PG_VERSION}*" | grep -Eo 'REL_[0-9]+_[0-9]+(_[0-9]+)?' | sort -V | tail -n 1) && \
    git checkout "$LATEST_TAG"

# Clone spock-private repository and apply patches using git apply
RUN git clone https://x-access-token:${GITHUB_TOKEN}@github.com/pgedge/spock-private.git /home/postgres/spock-private && \
    cd /home/postgres/spock-private && \
    PATCH_DIR="/home/postgres/spock-private/patches" && \
    echo "Cloned spock-private repository. Checking for patches in: $PATCH_DIR" && \
    ls -la $PATCH_DIR && \
    echo "LOOKING FOR PATCHES MATCHING: pg${PG_VERSION}-*.diff" && \

    PATCH_FILES=$(find "$PATCH_DIR" -maxdepth 1 -type f -name "pg${PG_VERSION}-*.diff" | sort -t'-' -k2,2n) && \
    if [ -n "$PATCH_FILES" ]; then \
        echo "Found patches:" && echo "$PATCH_FILES"; \
        cd /home/postgres/postgres-source && \
        for PATCH_FILE in $PATCH_FILES; do \
            echo "Applying patch with git apply: $PATCH_FILE"; \
            git apply "$PATCH_FILE" && echo "Successfully applied: $PATCH_FILE" || { echo "Failed to apply: $PATCH_FILE"; exit 1; }; \
        done; \
    else \
        echo "No patches found for pg$PG_VERSION."; \
    fi

# Configure, build, and install PostgreSQL
RUN cd /home/postgres/postgres-source && \
    ./configure --prefix=/usr/local/pgsql --without-icu && \
    make -j$(nproc) && \
    sudo make install

# Create postgres user and group
RUN groupadd -r postgres && useradd -r -g postgres postgres

# Ensure correct ownership for PostgreSQL data directory
RUN mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA"

# Switch to postgres user and initialize the database
USER postgres
RUN if [ ! -f "$PGDATA/PG_VERSION" ]; then \
      echo "Running initdb for PostgreSQL $PG_VERSION..."; \
      /usr/local/pgsql/bin/initdb -D "$PGDATA"; \
    fi

# I think we need to start the database
RUN /usr/local/pgsql/bin/pg_ctl -D "$PGDATA" -l /tmp/logfile start

# Switch back to root
USER root

# Add values to PATH/PG_VER as needed by Spock
RUN ls -la /usr/local/pgsql/bin
ENV PATH="/usr/local/pgsql/bin/:${PATH}"
RUN echo "Just used ENV PATH TO update PATH: $PATH"
RUN echo "Checking value of pg_ver: $PG_VER"

# We may or may not need to copy the compatXX files to the spock repo
RUN SPOCK_DIR="/home/postgres/spock-private/" && \
    POSTGRES_DIR="/home/postgres/postgres-source" && \
    echo "Postgres Source Directory: $POSTGRES_DIR" && \
    COMPAT_DIR="${SPOCK_DIR}compat${PG_VERSION}" && \
    echo "Spock Directory: $SPOCK_DIR" && \
    ls -la $SPOCK_DIR && \
    echo "compatXX is set to $COMPAT_DIR" && \
    ls -la $COMPAT_DIR && \
    if [ -d "$COMPAT_DIR" ]; then \
        echo "Copying contents of $COMPAT_DIR to $SPOCK_DIR..." && \
        cp -r "$COMPAT_DIR"/* "$SPOCK_DIR" && \
        echo "Successfully copied contents of $COMPAT_DIR." && \
        ls -la "$COMPAT_DIR"; \
    else \
        echo "Error: Directory $COMPAT_DIR does not exist!" && \
        ls -la "$SPOCK_DIR" || echo "Directory $COMPAT_DIR does not exist"; \
        exit 1; \
    fi

# Compile and install Spock extension
RUN cd /home/postgres/spock-private && \
    make && \
    make install

# Check to see if the server is running; start it if it isn't and set parameters for Spock
RUN sudo -u postgres bash -c "/usr/local/pgsql/bin/pg_ctl -D '$PGDATA' status" || \
    (echo 'Starting Postgres...' && \
    sudo -u postgres /usr/local/pgsql/bin/pg_ctl -D "$PGDATA" -o "-p $PGPORT" start && \
    sleep 5) && \
    /usr/local/pgsql/bin/pg_isready -U postgres -p "$PGPORT" && \
    /usr/local/pgsql/bin/psql -U postgres -d postgres -p "$PGPORT" -c "ALTER SYSTEM SET shared_preload_libraries TO 'spock';" && \
    /usr/local/pgsql/bin/psql -U postgres -d postgres -p "$PGPORT" -c "ALTER SYSTEM SET track_commit_timestamp TO 'on';"

RUN sudo -u postgres bash -c "/usr/local/pgsql/bin/pg_ctl -D '$PGDATA' status" || \
    (echo 'Starting Postgres...' && \
    sudo -u postgres /usr/local/pgsql/bin/pg_ctl -D "$PGDATA" -o "-p $PGPORT" start && \
    sleep 5) && \
    sudo -u postgres /usr/local/pgsql/bin/pg_isready -U postgres -p "$PGPORT" && \
    sudo -u postgres /usr/local/pgsql/bin/psql -U postgres -d postgres -p "$PGPORT" -c "SELECT * FROM pg_available_extensions;" && \
    sudo -u postgres /usr/local/pgsql/bin/psql -U postgres -d postgres -p "$PGPORT" -c "CREATE EXTENSION spock;"

# Switch back to root user
USER root

# Expose the PostgreSQL port
EXPOSE $PGPORT

# Start PostgreSQL at container startup
CMD ["/usr/local/pgsql/bin/postgres", "-D", "/var/lib/postgresql/data-${PG_VERSION}"]

